// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/uchronia.h"
#include <Rcpp.h>
// following line added by R function custom_rcpp_compile_attributes
#ifdef _WIN32
#define RcppExport extern "C" __declspec(dllexport)
#endif



using namespace Rcpp;

// RegisterExceptionCallback_Pkg
void RegisterExceptionCallback_Pkg();
RcppExport SEXP _uchronia_RegisterExceptionCallback_Pkg() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    RegisterExceptionCallback_Pkg();
    return R_NilValue;
END_RCPP
}
// GetTimeSeriesGeometry_Pkg
Rcpp::S4 GetTimeSeriesGeometry_Pkg(XPtr<opaque_pointer_handle> timeSeries);
RcppExport SEXP _uchronia_GetTimeSeriesGeometry_Pkg(SEXP timeSeriesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<opaque_pointer_handle> >::type timeSeries(timeSeriesSEXP);
    rcpp_result_gen = Rcpp::wrap(GetTimeSeriesGeometry_Pkg(timeSeries));
    return rcpp_result_gen;
END_RCPP
}
// GetEnsembleForecastTimeSeriesGeometry_Pkg
Rcpp::S4 GetEnsembleForecastTimeSeriesGeometry_Pkg(XPtr<opaque_pointer_handle> timeSeries);
RcppExport SEXP _uchronia_GetEnsembleForecastTimeSeriesGeometry_Pkg(SEXP timeSeriesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<opaque_pointer_handle> >::type timeSeries(timeSeriesSEXP);
    rcpp_result_gen = Rcpp::wrap(GetEnsembleForecastTimeSeriesGeometry_Pkg(timeSeries));
    return rcpp_result_gen;
END_RCPP
}
// GetItemEnsembleForecastTimeSeries_Pkg
Rcpp::S4 GetItemEnsembleForecastTimeSeries_Pkg(XPtr<opaque_pointer_handle> series, IntegerVector i);
RcppExport SEXP _uchronia_GetItemEnsembleForecastTimeSeries_Pkg(SEXP seriesSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<opaque_pointer_handle> >::type series(seriesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(GetItemEnsembleForecastTimeSeries_Pkg(series, i));
    return rcpp_result_gen;
END_RCPP
}
// SetItemEnsembleForecastTimeSeries_Pkg
void SetItemEnsembleForecastTimeSeries_Pkg(XPtr<opaque_pointer_handle> series, IntegerVector i, Rcpp::S4& timeSeriesEnsemble);
RcppExport SEXP _uchronia_SetItemEnsembleForecastTimeSeries_Pkg(SEXP seriesSEXP, SEXP iSEXP, SEXP timeSeriesEnsembleSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<opaque_pointer_handle> >::type series(seriesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type i(iSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4& >::type timeSeriesEnsemble(timeSeriesEnsembleSEXP);
    SetItemEnsembleForecastTimeSeries_Pkg(series, i, timeSeriesEnsemble);
    return R_NilValue;
END_RCPP
}
// GetEnsembleTimeSeries_Pkg
Rcpp::S4 GetEnsembleTimeSeries_Pkg(XPtr<opaque_pointer_handle> series);
RcppExport SEXP _uchronia_GetEnsembleTimeSeries_Pkg(SEXP seriesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<opaque_pointer_handle> >::type series(seriesSEXP);
    rcpp_result_gen = Rcpp::wrap(GetEnsembleTimeSeries_Pkg(series));
    return rcpp_result_gen;
END_RCPP
}
// TimeSeriesToTsInfo_Pkg
List TimeSeriesToTsInfo_Pkg(XPtr<opaque_pointer_handle> timeSeries);
RcppExport SEXP _uchronia_TimeSeriesToTsInfo_Pkg(SEXP timeSeriesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<opaque_pointer_handle> >::type timeSeries(timeSeriesSEXP);
    rcpp_result_gen = Rcpp::wrap(TimeSeriesToTsInfo_Pkg(timeSeries));
    return rcpp_result_gen;
END_RCPP
}
// GetDatasetFromLibrary_Pkg
Rcpp::S4 GetDatasetFromLibrary_Pkg(XPtr<opaque_pointer_handle> dataLibrary, CharacterVector dataIdentifier);
RcppExport SEXP _uchronia_GetDatasetFromLibrary_Pkg(SEXP dataLibrarySEXP, SEXP dataIdentifierSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<opaque_pointer_handle> >::type dataLibrary(dataLibrarySEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type dataIdentifier(dataIdentifierSEXP);
    rcpp_result_gen = Rcpp::wrap(GetDatasetFromLibrary_Pkg(dataLibrary, dataIdentifier));
    return rcpp_result_gen;
END_RCPP
}
// GetLastStdExceptionMessage_Rcpp
CharacterVector GetLastStdExceptionMessage_Rcpp();
RcppExport SEXP _uchronia_GetLastStdExceptionMessage_Rcpp() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(GetLastStdExceptionMessage_Rcpp());
    return rcpp_result_gen;
END_RCPP
}
// RegisterExceptionCallback_Rcpp
void RegisterExceptionCallback_Rcpp(XPtr<opaque_pointer_handle> callback);
RcppExport SEXP _uchronia_RegisterExceptionCallback_Rcpp(SEXP callbackSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<opaque_pointer_handle> >::type callback(callbackSEXP);
    RegisterExceptionCallback_Rcpp(callback);
    return R_NilValue;
END_RCPP
}
// DisposeSharedPointer_Rcpp
void DisposeSharedPointer_Rcpp(XPtr<opaque_pointer_handle> ptr);
RcppExport SEXP _uchronia_DisposeSharedPointer_Rcpp(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<opaque_pointer_handle> >::type ptr(ptrSEXP);
    DisposeSharedPointer_Rcpp(ptr);
    return R_NilValue;
END_RCPP
}
// DeleteDoubleArray_Rcpp
void DeleteDoubleArray_Rcpp(NumericVector value);
RcppExport SEXP _uchronia_DeleteDoubleArray_Rcpp(SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type value(valueSEXP);
    DeleteDoubleArray_Rcpp(value);
    return R_NilValue;
END_RCPP
}
// SetTimeSeriesMissingValueValue_Rcpp
void SetTimeSeriesMissingValueValue_Rcpp(NumericVector missingValueValue);
RcppExport SEXP _uchronia_SetTimeSeriesMissingValueValue_Rcpp(SEXP missingValueValueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type missingValueValue(missingValueValueSEXP);
    SetTimeSeriesMissingValueValue_Rcpp(missingValueValue);
    return R_NilValue;
END_RCPP
}
// LoadEnsembleDataset_Rcpp
XPtr<opaque_pointer_handle> LoadEnsembleDataset_Rcpp(CharacterVector libraryIdentifier, CharacterVector dataPath);
RcppExport SEXP _uchronia_LoadEnsembleDataset_Rcpp(SEXP libraryIdentifierSEXP, SEXP dataPathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type libraryIdentifier(libraryIdentifierSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type dataPath(dataPathSEXP);
    rcpp_result_gen = Rcpp::wrap(LoadEnsembleDataset_Rcpp(libraryIdentifier, dataPath));
    return rcpp_result_gen;
END_RCPP
}
// CreateEnsembleDataset_Rcpp
XPtr<opaque_pointer_handle> CreateEnsembleDataset_Rcpp(CharacterVector type);
RcppExport SEXP _uchronia_CreateEnsembleDataset_Rcpp(SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(CreateEnsembleDataset_Rcpp(type));
    return rcpp_result_gen;
END_RCPP
}
// GetEnsembleDatasetDataIdentifiers_Rcpp
CharacterVector GetEnsembleDatasetDataIdentifiers_Rcpp(XPtr<opaque_pointer_handle> dataLibrary);
RcppExport SEXP _uchronia_GetEnsembleDatasetDataIdentifiers_Rcpp(SEXP dataLibrarySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<opaque_pointer_handle> >::type dataLibrary(dataLibrarySEXP);
    rcpp_result_gen = Rcpp::wrap(GetEnsembleDatasetDataIdentifiers_Rcpp(dataLibrary));
    return rcpp_result_gen;
END_RCPP
}
// GetEnsembleDatasetDataSubIdentifiers_Rcpp
CharacterVector GetEnsembleDatasetDataSubIdentifiers_Rcpp(XPtr<opaque_pointer_handle> dataLibrary, CharacterVector dataCollectionId);
RcppExport SEXP _uchronia_GetEnsembleDatasetDataSubIdentifiers_Rcpp(SEXP dataLibrarySEXP, SEXP dataCollectionIdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<opaque_pointer_handle> >::type dataLibrary(dataLibrarySEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type dataCollectionId(dataCollectionIdSEXP);
    rcpp_result_gen = Rcpp::wrap(GetEnsembleDatasetDataSubIdentifiers_Rcpp(dataLibrary, dataCollectionId));
    return rcpp_result_gen;
END_RCPP
}
// GetEnsembleDatasetDataSummaries_Rcpp
CharacterVector GetEnsembleDatasetDataSummaries_Rcpp(XPtr<opaque_pointer_handle> dataLibrary);
RcppExport SEXP _uchronia_GetEnsembleDatasetDataSummaries_Rcpp(SEXP dataLibrarySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<opaque_pointer_handle> >::type dataLibrary(dataLibrarySEXP);
    rcpp_result_gen = Rcpp::wrap(GetEnsembleDatasetDataSummaries_Rcpp(dataLibrary));
    return rcpp_result_gen;
END_RCPP
}
// EnsembleSizeEnsembleTimeSeries_Rcpp
IntegerVector EnsembleSizeEnsembleTimeSeries_Rcpp(XPtr<opaque_pointer_handle> ensSeries);
RcppExport SEXP _uchronia_EnsembleSizeEnsembleTimeSeries_Rcpp(SEXP ensSeriesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<opaque_pointer_handle> >::type ensSeries(ensSeriesSEXP);
    rcpp_result_gen = Rcpp::wrap(EnsembleSizeEnsembleTimeSeries_Rcpp(ensSeries));
    return rcpp_result_gen;
END_RCPP
}
// CreateEnsembleForecastTimeSeries_Rcpp
XPtr<opaque_pointer_handle> CreateEnsembleForecastTimeSeries_Rcpp(Rcpp::Datetime start, IntegerVector length, CharacterVector timeStepName);
RcppExport SEXP _uchronia_CreateEnsembleForecastTimeSeries_Rcpp(SEXP startSEXP, SEXP lengthSEXP, SEXP timeStepNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Datetime >::type start(startSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type length(lengthSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type timeStepName(timeStepNameSEXP);
    rcpp_result_gen = Rcpp::wrap(CreateEnsembleForecastTimeSeries_Rcpp(start, length, timeStepName));
    return rcpp_result_gen;
END_RCPP
}
// GetDatasetSingleTimeSeries_Rcpp
XPtr<opaque_pointer_handle> GetDatasetSingleTimeSeries_Rcpp(XPtr<opaque_pointer_handle> dataLibrary, CharacterVector dataId);
RcppExport SEXP _uchronia_GetDatasetSingleTimeSeries_Rcpp(SEXP dataLibrarySEXP, SEXP dataIdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<opaque_pointer_handle> >::type dataLibrary(dataLibrarySEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type dataId(dataIdSEXP);
    rcpp_result_gen = Rcpp::wrap(GetDatasetSingleTimeSeries_Rcpp(dataLibrary, dataId));
    return rcpp_result_gen;
END_RCPP
}
// GetDatasetEnsembleTimeSeries_Rcpp
XPtr<opaque_pointer_handle> GetDatasetEnsembleTimeSeries_Rcpp(XPtr<opaque_pointer_handle> dataLibrary, CharacterVector dataEnsembleId);
RcppExport SEXP _uchronia_GetDatasetEnsembleTimeSeries_Rcpp(SEXP dataLibrarySEXP, SEXP dataEnsembleIdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<opaque_pointer_handle> >::type dataLibrary(dataLibrarySEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type dataEnsembleId(dataEnsembleIdSEXP);
    rcpp_result_gen = Rcpp::wrap(GetDatasetEnsembleTimeSeries_Rcpp(dataLibrary, dataEnsembleId));
    return rcpp_result_gen;
END_RCPP
}
// GetDatasetEnsembleForecastTimeSeries_Rcpp
XPtr<opaque_pointer_handle> GetDatasetEnsembleForecastTimeSeries_Rcpp(XPtr<opaque_pointer_handle> dataLibrary, CharacterVector dataId);
RcppExport SEXP _uchronia_GetDatasetEnsembleForecastTimeSeries_Rcpp(SEXP dataLibrarySEXP, SEXP dataIdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<opaque_pointer_handle> >::type dataLibrary(dataLibrarySEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type dataId(dataIdSEXP);
    rcpp_result_gen = Rcpp::wrap(GetDatasetEnsembleForecastTimeSeries_Rcpp(dataLibrary, dataId));
    return rcpp_result_gen;
END_RCPP
}
// SaveSingleTimeSeriesToNetcdf_Rcpp
void SaveSingleTimeSeriesToNetcdf_Rcpp(XPtr<opaque_pointer_handle> timeSeries, CharacterVector filename, LogicalVector overwrite);
RcppExport SEXP _uchronia_SaveSingleTimeSeriesToNetcdf_Rcpp(SEXP timeSeriesSEXP, SEXP filenameSEXP, SEXP overwriteSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<opaque_pointer_handle> >::type timeSeries(timeSeriesSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type overwrite(overwriteSEXP);
    SaveSingleTimeSeriesToNetcdf_Rcpp(timeSeries, filename, overwrite);
    return R_NilValue;
END_RCPP
}
// SaveEnsembleTimeSeriesToNetcdf_Rcpp
void SaveEnsembleTimeSeriesToNetcdf_Rcpp(XPtr<opaque_pointer_handle> collection, CharacterVector filename, LogicalVector overwrite);
RcppExport SEXP _uchronia_SaveEnsembleTimeSeriesToNetcdf_Rcpp(SEXP collectionSEXP, SEXP filenameSEXP, SEXP overwriteSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<opaque_pointer_handle> >::type collection(collectionSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type overwrite(overwriteSEXP);
    SaveEnsembleTimeSeriesToNetcdf_Rcpp(collection, filename, overwrite);
    return R_NilValue;
END_RCPP
}
// SaveEnsembleForecastTimeSeriesToNetcdf_Rcpp
void SaveEnsembleForecastTimeSeriesToNetcdf_Rcpp(XPtr<opaque_pointer_handle> tsEnsTs, CharacterVector filename, LogicalVector overwrite);
RcppExport SEXP _uchronia_SaveEnsembleForecastTimeSeriesToNetcdf_Rcpp(SEXP tsEnsTsSEXP, SEXP filenameSEXP, SEXP overwriteSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<opaque_pointer_handle> >::type tsEnsTs(tsEnsTsSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type overwrite(overwriteSEXP);
    SaveEnsembleForecastTimeSeriesToNetcdf_Rcpp(tsEnsTs, filename, overwrite);
    return R_NilValue;
END_RCPP
}
// IsMissingValueItemEnsembleForecastTimeSeries_Rcpp
LogicalVector IsMissingValueItemEnsembleForecastTimeSeries_Rcpp(XPtr<opaque_pointer_handle> series, IntegerVector i);
RcppExport SEXP _uchronia_IsMissingValueItemEnsembleForecastTimeSeries_Rcpp(SEXP seriesSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<opaque_pointer_handle> >::type series(seriesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(IsMissingValueItemEnsembleForecastTimeSeries_Rcpp(series, i));
    return rcpp_result_gen;
END_RCPP
}
// TimeSeriesFromEnsembleOfTimeSeries_Rcpp
XPtr<opaque_pointer_handle> TimeSeriesFromEnsembleOfTimeSeries_Rcpp(XPtr<opaque_pointer_handle> collectionTs, IntegerVector index);
RcppExport SEXP _uchronia_TimeSeriesFromEnsembleOfTimeSeries_Rcpp(SEXP collectionTsSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<opaque_pointer_handle> >::type collectionTs(collectionTsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(TimeSeriesFromEnsembleOfTimeSeries_Rcpp(collectionTs, index));
    return rcpp_result_gen;
END_RCPP
}
// TimeSeriesFromTimeSeriesOfEnsembleOfTimeSeries_Rcpp
XPtr<opaque_pointer_handle> TimeSeriesFromTimeSeriesOfEnsembleOfTimeSeries_Rcpp(XPtr<opaque_pointer_handle> efts, IntegerVector indexInIssueTime, IntegerVector indexInForecastTime);
RcppExport SEXP _uchronia_TimeSeriesFromTimeSeriesOfEnsembleOfTimeSeries_Rcpp(SEXP eftsSEXP, SEXP indexInIssueTimeSEXP, SEXP indexInForecastTimeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<opaque_pointer_handle> >::type efts(eftsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type indexInIssueTime(indexInIssueTimeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type indexInForecastTime(indexInForecastTimeSEXP);
    rcpp_result_gen = Rcpp::wrap(TimeSeriesFromTimeSeriesOfEnsembleOfTimeSeries_Rcpp(efts, indexInIssueTime, indexInForecastTime));
    return rcpp_result_gen;
END_RCPP
}
// GetValueFromUnivariateTimeSeries_Rcpp
NumericVector GetValueFromUnivariateTimeSeries_Rcpp(XPtr<opaque_pointer_handle> ts, IntegerVector index);
RcppExport SEXP _uchronia_GetValueFromUnivariateTimeSeries_Rcpp(SEXP tsSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<opaque_pointer_handle> >::type ts(tsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(GetValueFromUnivariateTimeSeries_Rcpp(ts, index));
    return rcpp_result_gen;
END_RCPP
}
// TransformEachItem_Rcpp
void TransformEachItem_Rcpp(XPtr<opaque_pointer_handle> tsEnsTs, CharacterVector method, CharacterVector methodArgument);
RcppExport SEXP _uchronia_TransformEachItem_Rcpp(SEXP tsEnsTsSEXP, SEXP methodSEXP, SEXP methodArgumentSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<opaque_pointer_handle> >::type tsEnsTs(tsEnsTsSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type method(methodSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type methodArgument(methodArgumentSEXP);
    TransformEachItem_Rcpp(tsEnsTs, method, methodArgument);
    return R_NilValue;
END_RCPP
}
// SetValueToUnivariateTimeSeries_Rcpp
void SetValueToUnivariateTimeSeries_Rcpp(XPtr<opaque_pointer_handle> ts, IntegerVector index, NumericVector value);
RcppExport SEXP _uchronia_SetValueToUnivariateTimeSeries_Rcpp(SEXP tsSEXP, SEXP indexSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<opaque_pointer_handle> >::type ts(tsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type index(indexSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type value(valueSEXP);
    SetValueToUnivariateTimeSeries_Rcpp(ts, index, value);
    return R_NilValue;
END_RCPP
}
// GetItemEnsembleTimeSeriesAsStructure_Rcpp
XPtr<opaque_pointer_handle> GetItemEnsembleTimeSeriesAsStructure_Rcpp(XPtr<opaque_pointer_handle> series, IntegerVector i);
RcppExport SEXP _uchronia_GetItemEnsembleTimeSeriesAsStructure_Rcpp(SEXP seriesSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<opaque_pointer_handle> >::type series(seriesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(GetItemEnsembleTimeSeriesAsStructure_Rcpp(series, i));
    return rcpp_result_gen;
END_RCPP
}
// SetItemEnsembleTimeSeriesAsStructure_Rcpp
void SetItemEnsembleTimeSeriesAsStructure_Rcpp(XPtr<opaque_pointer_handle> collection, IntegerVector i, const Rcpp::S4& values);
RcppExport SEXP _uchronia_SetItemEnsembleTimeSeriesAsStructure_Rcpp(SEXP collectionSEXP, SEXP iSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<opaque_pointer_handle> >::type collection(collectionSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type i(iSEXP);
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type values(valuesSEXP);
    SetItemEnsembleTimeSeriesAsStructure_Rcpp(collection, i, values);
    return R_NilValue;
END_RCPP
}
// CreatePerfectForecastTimeSeries_Rcpp
XPtr<opaque_pointer_handle> CreatePerfectForecastTimeSeries_Rcpp(XPtr<opaque_pointer_handle> observations, Rcpp::Datetime start, IntegerVector length, CharacterVector timeStepName, IntegerVector offsetForecasts, IntegerVector leadTime);
RcppExport SEXP _uchronia_CreatePerfectForecastTimeSeries_Rcpp(SEXP observationsSEXP, SEXP startSEXP, SEXP lengthSEXP, SEXP timeStepNameSEXP, SEXP offsetForecastsSEXP, SEXP leadTimeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<opaque_pointer_handle> >::type observations(observationsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Datetime >::type start(startSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type length(lengthSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type timeStepName(timeStepNameSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type offsetForecasts(offsetForecastsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type leadTime(leadTimeSEXP);
    rcpp_result_gen = Rcpp::wrap(CreatePerfectForecastTimeSeries_Rcpp(observations, start, length, timeStepName, offsetForecasts, leadTime));
    return rcpp_result_gen;
END_RCPP
}
// ToStructEnsembleTimeSeriesData_Rcpp
XPtr<opaque_pointer_handle> ToStructEnsembleTimeSeriesData_Rcpp(XPtr<opaque_pointer_handle> ensSeries);
RcppExport SEXP _uchronia_ToStructEnsembleTimeSeriesData_Rcpp(SEXP ensSeriesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<opaque_pointer_handle> >::type ensSeries(ensSeriesSEXP);
    rcpp_result_gen = Rcpp::wrap(ToStructEnsembleTimeSeriesData_Rcpp(ensSeries));
    return rcpp_result_gen;
END_RCPP
}
// ToStructSingleTimeSeriesData_Rcpp
XPtr<opaque_pointer_handle> ToStructSingleTimeSeriesData_Rcpp(XPtr<opaque_pointer_handle> timeSeries);
RcppExport SEXP _uchronia_ToStructSingleTimeSeriesData_Rcpp(SEXP timeSeriesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<opaque_pointer_handle> >::type timeSeries(timeSeriesSEXP);
    rcpp_result_gen = Rcpp::wrap(ToStructSingleTimeSeriesData_Rcpp(timeSeries));
    return rcpp_result_gen;
END_RCPP
}
// CreateEnsembleTimeSeriesDataFromStruct_Rcpp
XPtr<opaque_pointer_handle> CreateEnsembleTimeSeriesDataFromStruct_Rcpp(const Rcpp::S4& ensSeries);
RcppExport SEXP _uchronia_CreateEnsembleTimeSeriesDataFromStruct_Rcpp(SEXP ensSeriesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type ensSeries(ensSeriesSEXP);
    rcpp_result_gen = Rcpp::wrap(CreateEnsembleTimeSeriesDataFromStruct_Rcpp(ensSeries));
    return rcpp_result_gen;
END_RCPP
}
// CreateSingleTimeSeriesDataFromStruct_Rcpp
XPtr<opaque_pointer_handle> CreateSingleTimeSeriesDataFromStruct_Rcpp(const Rcpp::S4& timeSeries);
RcppExport SEXP _uchronia_CreateSingleTimeSeriesDataFromStruct_Rcpp(SEXP timeSeriesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type timeSeries(timeSeriesSEXP);
    rcpp_result_gen = Rcpp::wrap(CreateSingleTimeSeriesDataFromStruct_Rcpp(timeSeries));
    return rcpp_result_gen;
END_RCPP
}
// GetTimeSeriesGeometry_Rcpp
void GetTimeSeriesGeometry_Rcpp(XPtr<opaque_pointer_handle> timeSeries, const Rcpp::S4& geom);
RcppExport SEXP _uchronia_GetTimeSeriesGeometry_Rcpp(SEXP timeSeriesSEXP, SEXP geomSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<opaque_pointer_handle> >::type timeSeries(timeSeriesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type geom(geomSEXP);
    GetTimeSeriesGeometry_Rcpp(timeSeries, geom);
    return R_NilValue;
END_RCPP
}
// GetEnsembleForecastTimeSeriesGeometry_Rcpp
void GetEnsembleForecastTimeSeriesGeometry_Rcpp(XPtr<opaque_pointer_handle> timeSeries, const Rcpp::S4& geom);
RcppExport SEXP _uchronia_GetEnsembleForecastTimeSeriesGeometry_Rcpp(SEXP timeSeriesSEXP, SEXP geomSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<opaque_pointer_handle> >::type timeSeries(timeSeriesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type geom(geomSEXP);
    GetEnsembleForecastTimeSeriesGeometry_Rcpp(timeSeries, geom);
    return R_NilValue;
END_RCPP
}
// GetTimeSeriesValues_Rcpp
void GetTimeSeriesValues_Rcpp(XPtr<opaque_pointer_handle> timeSeries, NumericVector values, IntegerVector arrayLength);
RcppExport SEXP _uchronia_GetTimeSeriesValues_Rcpp(SEXP timeSeriesSEXP, SEXP valuesSEXP, SEXP arrayLengthSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<opaque_pointer_handle> >::type timeSeries(timeSeriesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type arrayLength(arrayLengthSEXP);
    GetTimeSeriesValues_Rcpp(timeSeries, values, arrayLength);
    return R_NilValue;
END_RCPP
}
// GetNumTimeSeries_Rcpp
IntegerVector GetNumTimeSeries_Rcpp();
RcppExport SEXP _uchronia_GetNumTimeSeries_Rcpp() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(GetNumTimeSeries_Rcpp());
    return rcpp_result_gen;
END_RCPP
}
// GetProviderTsGeometry_Rcpp
void GetProviderTsGeometry_Rcpp(XPtr<opaque_pointer_handle> dataLibrary, CharacterVector variableIdentifier, const Rcpp::S4& geom);
RcppExport SEXP _uchronia_GetProviderTsGeometry_Rcpp(SEXP dataLibrarySEXP, SEXP variableIdentifierSEXP, SEXP geomSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<opaque_pointer_handle> >::type dataLibrary(dataLibrarySEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type variableIdentifier(variableIdentifierSEXP);
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type geom(geomSEXP);
    GetProviderTsGeometry_Rcpp(dataLibrary, variableIdentifier, geom);
    return R_NilValue;
END_RCPP
}
// GetProviderTimeSeriesValues_Rcpp
void GetProviderTimeSeriesValues_Rcpp(XPtr<opaque_pointer_handle> dataLibrary, CharacterVector variableIdentifier, NumericVector values, IntegerVector arrayLength);
RcppExport SEXP _uchronia_GetProviderTimeSeriesValues_Rcpp(SEXP dataLibrarySEXP, SEXP variableIdentifierSEXP, SEXP valuesSEXP, SEXP arrayLengthSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<opaque_pointer_handle> >::type dataLibrary(dataLibrarySEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type variableIdentifier(variableIdentifierSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type arrayLength(arrayLengthSEXP);
    GetProviderTimeSeriesValues_Rcpp(dataLibrary, variableIdentifier, values, arrayLength);
    return R_NilValue;
END_RCPP
}
// GetProviderTimeSeriesIdentifiers_Rcpp
CharacterVector GetProviderTimeSeriesIdentifiers_Rcpp(XPtr<opaque_pointer_handle> dataLibrary);
RcppExport SEXP _uchronia_GetProviderTimeSeriesIdentifiers_Rcpp(SEXP dataLibrarySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<opaque_pointer_handle> >::type dataLibrary(dataLibrarySEXP);
    rcpp_result_gen = Rcpp::wrap(GetProviderTimeSeriesIdentifiers_Rcpp(dataLibrary));
    return rcpp_result_gen;
END_RCPP
}
// TimeSeriesFromProviderTs_Rcpp
XPtr<opaque_pointer_handle> TimeSeriesFromProviderTs_Rcpp(XPtr<opaque_pointer_handle> dataLibrary, CharacterVector variableIdentifier);
RcppExport SEXP _uchronia_TimeSeriesFromProviderTs_Rcpp(SEXP dataLibrarySEXP, SEXP variableIdentifierSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<opaque_pointer_handle> >::type dataLibrary(dataLibrarySEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type variableIdentifier(variableIdentifierSEXP);
    rcpp_result_gen = Rcpp::wrap(TimeSeriesFromProviderTs_Rcpp(dataLibrary, variableIdentifier));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_uchronia_RegisterExceptionCallback_Pkg", (DL_FUNC) &_uchronia_RegisterExceptionCallback_Pkg, 0},
    {"_uchronia_GetTimeSeriesGeometry_Pkg", (DL_FUNC) &_uchronia_GetTimeSeriesGeometry_Pkg, 1},
    {"_uchronia_GetEnsembleForecastTimeSeriesGeometry_Pkg", (DL_FUNC) &_uchronia_GetEnsembleForecastTimeSeriesGeometry_Pkg, 1},
    {"_uchronia_GetItemEnsembleForecastTimeSeries_Pkg", (DL_FUNC) &_uchronia_GetItemEnsembleForecastTimeSeries_Pkg, 2},
    {"_uchronia_SetItemEnsembleForecastTimeSeries_Pkg", (DL_FUNC) &_uchronia_SetItemEnsembleForecastTimeSeries_Pkg, 3},
    {"_uchronia_GetEnsembleTimeSeries_Pkg", (DL_FUNC) &_uchronia_GetEnsembleTimeSeries_Pkg, 1},
    {"_uchronia_TimeSeriesToTsInfo_Pkg", (DL_FUNC) &_uchronia_TimeSeriesToTsInfo_Pkg, 1},
    {"_uchronia_GetDatasetFromLibrary_Pkg", (DL_FUNC) &_uchronia_GetDatasetFromLibrary_Pkg, 2},
    {"_uchronia_GetLastStdExceptionMessage_Rcpp", (DL_FUNC) &_uchronia_GetLastStdExceptionMessage_Rcpp, 0},
    {"_uchronia_RegisterExceptionCallback_Rcpp", (DL_FUNC) &_uchronia_RegisterExceptionCallback_Rcpp, 1},
    {"_uchronia_DisposeSharedPointer_Rcpp", (DL_FUNC) &_uchronia_DisposeSharedPointer_Rcpp, 1},
    {"_uchronia_DeleteDoubleArray_Rcpp", (DL_FUNC) &_uchronia_DeleteDoubleArray_Rcpp, 1},
    {"_uchronia_SetTimeSeriesMissingValueValue_Rcpp", (DL_FUNC) &_uchronia_SetTimeSeriesMissingValueValue_Rcpp, 1},
    {"_uchronia_LoadEnsembleDataset_Rcpp", (DL_FUNC) &_uchronia_LoadEnsembleDataset_Rcpp, 2},
    {"_uchronia_CreateEnsembleDataset_Rcpp", (DL_FUNC) &_uchronia_CreateEnsembleDataset_Rcpp, 1},
    {"_uchronia_GetEnsembleDatasetDataIdentifiers_Rcpp", (DL_FUNC) &_uchronia_GetEnsembleDatasetDataIdentifiers_Rcpp, 1},
    {"_uchronia_GetEnsembleDatasetDataSubIdentifiers_Rcpp", (DL_FUNC) &_uchronia_GetEnsembleDatasetDataSubIdentifiers_Rcpp, 2},
    {"_uchronia_GetEnsembleDatasetDataSummaries_Rcpp", (DL_FUNC) &_uchronia_GetEnsembleDatasetDataSummaries_Rcpp, 1},
    {"_uchronia_EnsembleSizeEnsembleTimeSeries_Rcpp", (DL_FUNC) &_uchronia_EnsembleSizeEnsembleTimeSeries_Rcpp, 1},
    {"_uchronia_CreateEnsembleForecastTimeSeries_Rcpp", (DL_FUNC) &_uchronia_CreateEnsembleForecastTimeSeries_Rcpp, 3},
    {"_uchronia_GetDatasetSingleTimeSeries_Rcpp", (DL_FUNC) &_uchronia_GetDatasetSingleTimeSeries_Rcpp, 2},
    {"_uchronia_GetDatasetEnsembleTimeSeries_Rcpp", (DL_FUNC) &_uchronia_GetDatasetEnsembleTimeSeries_Rcpp, 2},
    {"_uchronia_GetDatasetEnsembleForecastTimeSeries_Rcpp", (DL_FUNC) &_uchronia_GetDatasetEnsembleForecastTimeSeries_Rcpp, 2},
    {"_uchronia_SaveSingleTimeSeriesToNetcdf_Rcpp", (DL_FUNC) &_uchronia_SaveSingleTimeSeriesToNetcdf_Rcpp, 3},
    {"_uchronia_SaveEnsembleTimeSeriesToNetcdf_Rcpp", (DL_FUNC) &_uchronia_SaveEnsembleTimeSeriesToNetcdf_Rcpp, 3},
    {"_uchronia_SaveEnsembleForecastTimeSeriesToNetcdf_Rcpp", (DL_FUNC) &_uchronia_SaveEnsembleForecastTimeSeriesToNetcdf_Rcpp, 3},
    {"_uchronia_IsMissingValueItemEnsembleForecastTimeSeries_Rcpp", (DL_FUNC) &_uchronia_IsMissingValueItemEnsembleForecastTimeSeries_Rcpp, 2},
    {"_uchronia_TimeSeriesFromEnsembleOfTimeSeries_Rcpp", (DL_FUNC) &_uchronia_TimeSeriesFromEnsembleOfTimeSeries_Rcpp, 2},
    {"_uchronia_TimeSeriesFromTimeSeriesOfEnsembleOfTimeSeries_Rcpp", (DL_FUNC) &_uchronia_TimeSeriesFromTimeSeriesOfEnsembleOfTimeSeries_Rcpp, 3},
    {"_uchronia_GetValueFromUnivariateTimeSeries_Rcpp", (DL_FUNC) &_uchronia_GetValueFromUnivariateTimeSeries_Rcpp, 2},
    {"_uchronia_TransformEachItem_Rcpp", (DL_FUNC) &_uchronia_TransformEachItem_Rcpp, 3},
    {"_uchronia_SetValueToUnivariateTimeSeries_Rcpp", (DL_FUNC) &_uchronia_SetValueToUnivariateTimeSeries_Rcpp, 3},
    {"_uchronia_GetItemEnsembleTimeSeriesAsStructure_Rcpp", (DL_FUNC) &_uchronia_GetItemEnsembleTimeSeriesAsStructure_Rcpp, 2},
    {"_uchronia_SetItemEnsembleTimeSeriesAsStructure_Rcpp", (DL_FUNC) &_uchronia_SetItemEnsembleTimeSeriesAsStructure_Rcpp, 3},
    {"_uchronia_CreatePerfectForecastTimeSeries_Rcpp", (DL_FUNC) &_uchronia_CreatePerfectForecastTimeSeries_Rcpp, 6},
    {"_uchronia_ToStructEnsembleTimeSeriesData_Rcpp", (DL_FUNC) &_uchronia_ToStructEnsembleTimeSeriesData_Rcpp, 1},
    {"_uchronia_ToStructSingleTimeSeriesData_Rcpp", (DL_FUNC) &_uchronia_ToStructSingleTimeSeriesData_Rcpp, 1},
    {"_uchronia_CreateEnsembleTimeSeriesDataFromStruct_Rcpp", (DL_FUNC) &_uchronia_CreateEnsembleTimeSeriesDataFromStruct_Rcpp, 1},
    {"_uchronia_CreateSingleTimeSeriesDataFromStruct_Rcpp", (DL_FUNC) &_uchronia_CreateSingleTimeSeriesDataFromStruct_Rcpp, 1},
    {"_uchronia_GetTimeSeriesGeometry_Rcpp", (DL_FUNC) &_uchronia_GetTimeSeriesGeometry_Rcpp, 2},
    {"_uchronia_GetEnsembleForecastTimeSeriesGeometry_Rcpp", (DL_FUNC) &_uchronia_GetEnsembleForecastTimeSeriesGeometry_Rcpp, 2},
    {"_uchronia_GetTimeSeriesValues_Rcpp", (DL_FUNC) &_uchronia_GetTimeSeriesValues_Rcpp, 3},
    {"_uchronia_GetNumTimeSeries_Rcpp", (DL_FUNC) &_uchronia_GetNumTimeSeries_Rcpp, 0},
    {"_uchronia_GetProviderTsGeometry_Rcpp", (DL_FUNC) &_uchronia_GetProviderTsGeometry_Rcpp, 3},
    {"_uchronia_GetProviderTimeSeriesValues_Rcpp", (DL_FUNC) &_uchronia_GetProviderTimeSeriesValues_Rcpp, 4},
    {"_uchronia_GetProviderTimeSeriesIdentifiers_Rcpp", (DL_FUNC) &_uchronia_GetProviderTimeSeriesIdentifiers_Rcpp, 1},
    {"_uchronia_TimeSeriesFromProviderTs_Rcpp", (DL_FUNC) &_uchronia_TimeSeriesFromProviderTs_Rcpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_uchronia(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
