# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: matrix-build

on:
  push:
    branches: [ "testing" ]
  #pull_request:
  #  branches: [ "testing" ]

env:
  UT_DATA_DIRNAME: _ut_data
  INSTALL_PREFIX: /usr/local
  CM: "cmake -DCMAKE_CXX_COMPILER=g++ -DCMAKE_C_COMPILER=gcc -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_PREFIX_PATH=/usr/local -DCMAKE_MODULE_PATH=/usr/local/share/cmake/Modules/ -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON .."

jobs:
  build:
    strategy:
      matrix:
        # os: [ubuntu-latest, macos-latest, windows-latest]
        os: [ubuntu-latest]
        # python-version: ["3.9", "3.10"]
        # exclude:
        #   - os: macos-latest
        #     python-version: "3.10"
        #   - os: windows-latest
        #     python-version: "3.10"
      fail-fast: true
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    - name: Install third party libs
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          cmake \
          g++ \
          p7zip-full \
          curl \
          libboost-system-dev \
          libboost-date-time-dev \
          libboost-regex-dev \
          libboost-filesystem-dev \
          libboost-graph-dev \
          libboost-thread-dev \
          libtbb-dev \
          libnetcdf-dev \
          libudunits2-dev

    # First(?) party dependencies: ours...
    - name: Check out moirai repo
      uses: actions/checkout@v3
      with:
        repository: csiro-hydroinformatics/moirai
        ref: testing
        path: moirai
        # token: ${{ secrets.my_pat }}

    - name: Check out c-interop repo
      uses: actions/checkout@v3
      with:
        repository: csiro-hydroinformatics/c-interop
        ref: testing
        path: c-interop
        # token: ${{ secrets.my_pat }}

    - name: Check out config-utils repo
      uses: actions/checkout@v3
      with:
        repository: csiro-hydroinformatics/config-utils
        ref: testing
        path: config-utils
        # token: ${{ secrets.my_pat }}

    - name: Install moirai C++ headers
      run: |
        cd moirai
        mkdir -p build && cd build
        $CM
        sudo make install

    - name: Install config-utils material
      run: |
        cd config-utils
        sudo mkdir -p ${INSTALL_PREFIX}/share/cmake/Modules
        sudo cp ./cmake/Modules/* ${INSTALL_PREFIX}/share/cmake/Modules/
        cd ./catch
        mkdir -p build ; cd build
        $CM
        sudo make install

    - name: Install c-interop C++ headers
      run: |
        cd c-interop
        mkdir -p build && cd build
        $CM
        sudo make install

    - name: Build and install uchronia libs and headers
      run: |
        cd datatypes
        mkdir -p build && cd build
        cmake -DCMAKE_CXX_COMPILER=g++ -DCMAKE_C_COMPILER=gcc -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_PREFIX_PATH=/usr/local -DCMAKE_MODULE_PATH=/usr/local/share/cmake/Modules/ -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON ..
        sudo make install

    - name: Fetch test data
      run: |
        UT_DATA_DIR=${GITHUB_WORKSPACE}/${UT_DATA_DIRNAME}
        mkdir -p $UT_DATA_DIR
        cd $UT_DATA_DIR
        curl -o swift_test_data.7z https://cloudstor.aarnet.edu.au/plus/s/RU6kLfzuncINu4f/download
        # sudo apt-get install p7zip-full
        7zr x swift_test_data.7z

    - name: Build/run unit tests
      run: |
        cd datatypes/tests
        mkdir -p build ; cd build
        $CM
        sudo make
        export SWIFT_TEST_DIR=${GITHUB_WORKSPACE}/${UT_DATA_DIRNAME}/documentation
        ./datatypes_tests

    - name: Build/run API unit tests
      run: |
        cd datatypes/tests/api
        mkdir -p build ; cd build
        $CM
        sudo make
        export SWIFT_TEST_DIR=${GITHUB_WORKSPACE}/${UT_DATA_DIRNAME}/documentation
        ./datatypes_tests_api

    # - name: Set up Python ${{ matrix.python-version }}
    #   uses: actions/setup-python@v3
    #   with:
    #     python-version: ${{ matrix.python-version }}
    # - name: Install Python dependencies for uchronia
    #   run: |
    #     python -m pip install --upgrade pip
    #     python -m pip install flake8 pytest
    #     cd bindings/python/uchronia
    #     if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    #     if [ -f tests/requirements.txt ]; then pip install -r tests/requirements.txt; fi
    # #- name: Lint with flake8
    # #  run: |
    # #    # stop the build if there are Python syntax errors or undefined names
    # #    flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    # #    # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
    # #    flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    # - name: Compile native code for the unit tests
    #   run: |
    #     cd bindings/python/cinterop/tests/test_native_library
    #     cmake -Bbuild .
    #     cmake --build build
    # - name: Test with pytest
    #   run: |
    #     cd bindings/python/cinterop
    #     pytest tests/ --cov=cinterop --cov-report=xml
    # # - name: Mypy type check
    # #   run: poetry run mypy .
    # - name: Use Codecov to track coverage
    #   if: matrix.os == 'linux' && matrix.python-version == '3.9'
    #   uses: codecov/codecov-action@v3
    #   with:
    #     files: coverage.xml   # coverage report
